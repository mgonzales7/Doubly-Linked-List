Script started on Mon 01 Dec 2014 10:09:28 PM EST
]0;gonzales@storm:~/CS2200/lab4a[?1034h[gonzales@storm lab4a]$ cat st[K[Kstudent.h
//Michael Gonzales
//HeaderFile for the Student Object that holds data for linked list
#include <iostream>
#include <string>
using namespace std;

class student {

public:
	student();
	student(string, string, string, int, int);
	void display();
	string getFirst();
	string getMid();
	string getLast();
	int getAge();
	int getSocial();
private:
	string nameFirst, nameMid, nameLast;
	int social, age;
};
]0;gonzales@storm:~/CS2200/lab4a[gonzales@storm lab4a]$ cat student.cpp
//Michael Gonzales
//Source Code For Student Class contains data
#include "student.h"

student::student(){
	nameFirst = "";
	nameMid = "";
	nameLast = "";
	social = 0;
	age = 0;
}

student::student(string fName, string lName, string mi, int ss, int uAge) {
	nameFirst=fName;
	nameLast =lName;
	nameMid=mi;
	social=ss;
	age=uAge;
}

void student::display() {
	cout << endl;
	cout <<"First Name: " << nameFirst << endl;
	cout <<"Middle Name: " << nameMid << endl;
	cout <<"Last Name: " <<nameLast << endl;
	cout <<"Social Security Number: " << social << endl;
	cout <<"Age: " << age << endl;
}

string student::getFirst() {
	return nameFirst;
}

string student::getMid() {
	return nameMid;
}

string student::getLast(){
	return nameLast;
}

int student::getAge(){
	return age;
}

int student::getSocial(){
	return social;
}
]0;gonzales@storm:~/CS2200/lab4a[gonzales@storm lab4a]$ cat node.h
//Michael Gonzales
//Header File for Node Class
#include <iostream>
#include "student.h"
#include <string>
#include <fstream>
using namespace std;

class Node{
public:
	//Constructorrs
	Node();
	Node(string, string, string, int, int);
	Node(const Node*);	
	Node*getNext();        //Returns Next data member
	void setNext(Node*);   //Sets next data member
	void display();
	string getFirst()const;
	string getMid()const;
	string getLast()const;
	int getAge ()const;
	int getSocial()const;
private:
	student *sPtr;    //pointer to Student Object
	Node *Next;       //pointer to next node
};

]0;gonzales@storm:~/CS2200/lab4a[gonzales@storm lab4a]$ cat node.cpp
//Michael Gonzales
//Source Code for Node Class
#include "node.h"

Node::Node() {
	Next=NULL;
}
Node::Node(string fname, string lname, string mi, int ss, int age){
	student * temp;
	temp = new student(fname, lname, mi, ss, age);
	sPtr= temp;
	Next=NULL;
}
Node::Node(const Node* x){

	sPtr = new student(x->getFirst(),x->getLast(),x->getMid(), x->getSocial(), x->getAge());
	Next=NULL;
}
Node*Node::getNext(){
	return Next;
}
void Node::display(){
	sPtr->display();
}
void Node::setNext(Node* n){
	Next=n;
}
string Node:: getFirst() const {
	return sPtr->getFirst();
}
string Node:: getMid() const {
	return sPtr->getMid();
}
string Node:: getLast() const {
	return sPtr->getLast();
}
int Node:: getAge() const {
	return sPtr->getAge();
} 
int Node:: getSocial() const {
	return sPtr->getSocial();
}
]0;gonzales@storm:~/CS2200/lab4a[gonzales@storm lab4a]$ cat list.h
//Michael Gonzales
//Linked List Class Header File
#include <iostream>
#include <fstream>
#include "node.h"
using namespace std;

class List {
public:
	//Constructors
	List();
	List(const List&);
	List(ifstream &);
	~List();
	//Accessor Functions
	bool isEmpty();
	int getNumNodes();
	void append(Node*);
	void Delete();
	void displayAscending();
	void bubbleSort();
	void swap(Node*, Node*, Node*);
	Node*getHead()const ;
private:
	//Private Data Members
	Node * head;
};
]0;gonzales@storm:~/CS2200/lab4a[gonzales@storm lab4a]$ cat list.cpp
//Michael Gonzales
//Source Code for List Class
#include "list.h"

List::List(){
	head = NULL;
}
List::List(const List & x){
	Node *curr = x.head;
	head = NULL;

	while( curr!=NULL ){
		Node *nPtr = new Node ( curr );
		append( nPtr );
		curr=curr->getNext();
	}

}
List::List(ifstream &InputFile){
        string fname, lname, mi;
        int ss, age;
	head = NULL;
        if(InputFile.is_open()){
                while (InputFile >> fname >> mi >> lname >> ss >> age) {
                	Node*nPtr;
			nPtr = new Node (fname, lname, mi, ss, age);
			append( nPtr);       
                }
        InputFile.close();
        }
}

List::~List(){
	Node*curr;
	Node*next;
	curr=head;
	while(curr !=NULL) {
		next=curr->getNext();
		delete curr;
		curr=next;
	}
}	
	
bool List::isEmpty(){
	bool value=false;
	if (head==NULL)
		value=true;	
	return value;
}
int List::getNumNodes(){
	Node*curr=head;
	int count=0;
	if(head==NULL)
		count=0;
	else{
		while(curr){
			count++;
			curr=curr->getNext();	
		}
	}
	return count;

}
void List::append(Node * nPtr){
	Node*curr;
        curr=head;
        if (head == NULL)
                head=nPtr;
        else {
                while(curr->getNext()!= NULL)
                        curr=curr->getNext();
                curr->setNext(nPtr);
        }
}
void List::Delete(){
	
}
void List::displayAscending(){
        Node*curr;
        curr=head;
        if(head == NULL)
                cout <<"Empty list\n";
        else{
                while(curr!= NULL){
                        curr->display();
                        curr=curr->getNext();
                }
        }
	
}
void List::bubbleSort(){
	int size=this->getNumNodes();
	for(int i=0; i<size;i++){
		Node*prev=head;	
		Node*curr=head;
		Node*next=head->getNext();
		if (next==NULL){
			cout<<"List has One Node Only";
		}
		else {
			if (curr==head) {
				if (curr->getAge() > next->getAge()){
					swap(prev, curr, next);
					prev=next;
					next=curr->getNext();
				}
			}
			while(curr->getNext() != NULL){
				if (curr->getAge() > next->getAge()){
                                        swap(prev, curr, next);
					prev=next;
					next=curr->getNext();
				}
				else {
				prev=curr;
				curr=next;
				next=next->getNext();
				}
			}	
		
		}
	}
}	
Node* List::getHead()const{
	return head;
}
void List::swap(Node*prev, Node*curr, Node*next){
	if (prev==curr) {
		curr->setNext(next->getNext());
		next->setNext(curr);
		head=next;
	}
	else {
		prev->setNext(next);
		curr->setNext(next->getNext());
		next->setNext(curr);
	}
}
]0;gonzales@storm:~/CS2200/lab4a[gonzales@storm lab4a]$ cat main.cpp
//Michael Gonzales
//Driver Program
#include "list.h"
#include <iostream>
using namespace std;

//Main Function
int main(){
	ifstream file ("file.txt");
	cout <<"Unsorted Linked List created from file\n"
	     <<"--------------------------------------\n";
	List A(file);
	A.displayAscending();
	cout <<"\nNow displaying exact copy via Copy Constructor\n"
	     <<  "----------------------------------------------\n";
	List B(A);
	B.displayAscending();
	cout <<"\nNow Sorting and Display by Age\n"
	     <<  "------------------------------\n";
	B.bubbleSort();
	B.displayAscending();
	return 0;
}



]0;gonzales@storm:~/CS2200/lab4a[gonzales@storm lab4a]$ ./a.out
Unsorted Linked List created from file
--------------------------------------

First Name: christine
Middle Name: p
Last Name: kanaris
Social Security Number: 1231231234
Age: 52

First Name: evangeline
Middle Name: p
Last Name: kanaris
Social Security Number: 1231231234
Age: 8

First Name: anastas
Middle Name: c
Last Name: kanaris
Social Security Number: 1231231234
Age: 18

First Name: john
Middle Name: d
Last Name: kanaris
Social Security Number: 1231231234
Age: 15

First Name: emmanuel
Middle Name: j
Last Name: papadakis
Social Security Number: 1231231234
Age: 44

First Name: nicolas
Middle Name: a
Last Name: kanaris
Social Security Number: 1231231234
Age: 55

First Name: joanna
Middle Name: e
Last Name: papadakis
Social Security Number: 1231231234
Age: 16

First Name: rafaela
Middle Name: e
Last Name: travis
Social Security Number: 1231231234
Age: 2

First Name: christine
Middle Name: m
Last Name: stavrou
Social Security Number: 1231231234
Age: 30

First Name: athanasia
Middle Name: p
Last Name: papadakis
Social Security Number: 1231231234
Age: 84

Now displaying exact copy via Copy Constructor
----------------------------------------------

First Name: christine
Middle Name: p
Last Name: kanaris
Social Security Number: 1231231234
Age: 52

First Name: evangeline
Middle Name: p
Last Name: kanaris
Social Security Number: 1231231234
Age: 8

First Name: anastas
Middle Name: c
Last Name: kanaris
Social Security Number: 1231231234
Age: 18

First Name: john
Middle Name: d
Last Name: kanaris
Social Security Number: 1231231234
Age: 15

First Name: emmanuel
Middle Name: j
Last Name: papadakis
Social Security Number: 1231231234
Age: 44

First Name: nicolas
Middle Name: a
Last Name: kanaris
Social Security Number: 1231231234
Age: 55

First Name: joanna
Middle Name: e
Last Name: papadakis
Social Security Number: 1231231234
Age: 16

First Name: rafaela
Middle Name: e
Last Name: travis
Social Security Number: 1231231234
Age: 2

First Name: christine
Middle Name: m
Last Name: stavrou
Social Security Number: 1231231234
Age: 30

First Name: athanasia
Middle Name: p
Last Name: papadakis
Social Security Number: 1231231234
Age: 84

Now Sorting and Display by Age
------------------------------

First Name: rafaela
Middle Name: e
Last Name: travis
Social Security Number: 1231231234
Age: 2

First Name: evangeline
Middle Name: p
Last Name: kanaris
Social Security Number: 1231231234
Age: 8

First Name: john
Middle Name: d
Last Name: kanaris
Social Security Number: 1231231234
Age: 15

First Name: joanna
Middle Name: e
Last Name: papadakis
Social Security Number: 1231231234
Age: 16

First Name: anastas
Middle Name: c
Last Name: kanaris
Social Security Number: 1231231234
Age: 18

First Name: christine
Middle Name: m
Last Name: stavrou
Social Security Number: 1231231234
Age: 30

First Name: emmanuel
Middle Name: j
Last Name: papadakis
Social Security Number: 1231231234
Age: 44

First Name: christine
Middle Name: p
Last Name: kanaris
Social Security Number: 1231231234
Age: 52

First Name: nicolas
Middle Name: a
Last Name: kanaris
Social Security Number: 1231231234
Age: 55

First Name: athanasia
Middle Name: p
Last Name: papadakis
Social Security Number: 1231231234
Age: 84
]0;gonzales@storm:~/CS2200/lab4a[gonzales@storm lab4a]$ exit
exit

Script done on Mon 01 Dec 2014 10:10:31 PM EST
